#!usr/bin/python3
'''
This program is to extract contents from mp-log file and send an email when a condition is met
Documentation:
---
The line `sh_client = paramiko.SSHClient()` in Python creates a new instance of the `SSHClient` class from the `paramiko` module.

`paramiko` is a Python library that provides an implementation of the SSH protocol for secure communication with remote servers. The `SSHClient` class is a part of this library and is used to create an SSH client object that can be used to connect to an SSH server and execute commands remotely.

By creating a new instance of the `SSHClient` class using the `paramiko.SSHClient()` constructor, you can establish a connection to an SSH server and perform actions such as executing commands, transferring files, or managing remote connections.

Once you have created an `SSHClient` object, you can use its methods to connect to an SSH server, authenticate with a username and password or public key, and execute commands on the remote server. For example, you can use the `connect()` method to connect to a remote server and the `exec_command()` method to execute a command remotely.

---
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) sets the missing host key policy of an SSHClient object to AutoAddPolicy.

When an SSH client connects to a remote server for the first time, it checks if the server's host key is already known and matches a known host key in the client's ~/.ssh/known_hosts file. If the host key is not known, the client will prompt the user to confirm whether they want to add the new host key to the known_hosts file.

The AutoAddPolicy is a policy class in the paramiko module that provides an automated way of adding new host keys to the known_hosts file without requiring user confirmation. By setting the missing_host_key_policy of an SSHClient object to AutoAddPolicy, the client will automatically add new host keys to the known_hosts file without prompting the user.

****This can be useful when connecting to new or changing servers that have not yet been added to the known_hosts file. However, it can also be a security risk, as it could allow a man-in-the-middle attacker to intercept the connection and provide their own key, potentially compromising the security of the connection.

Therefore, it is important to ensure that the known_hosts file is securely managed and that the AutoAddPolicy is only used in trusted environments.***
---
In Python, ssh_stdin, ssh_stdout, and ssh_stderr are typically variables that hold the standard input, output, and error streams of an SSH connection established using the paramiko library.

When you establish an SSH connection using paramiko, you can use the SSHClient.exec_command() method to execute a command on the remote server. This method returns three file-like objects that correspond to the standard input, output, and error streams of the remote command. These file-like objects are typically assigned to the variables ssh_stdin, ssh_stdout, and ssh_stderr, respectively.

    ssh_stdin: This variable holds a file-like object that represents the standard input stream of the remote command. You can use this object to write input to the remote command, if necessary.

    ssh_stdout: This variable holds a file-like object that represents the standard output stream of the remote command. You can read from this object to retrieve the output of the remote command.

    ssh_stderr: This variable holds a file-like object that represents the standard error stream of the remote command. You can read from this object to retrieve any error messages generated by the remote command.

Once you have executed a command on the remote server and retrieved its output and error messages using these variables, you can manipulate or process the data as necessary. For example, you might parse the output to extract specific information or write it to a local file for further analysis.
---
'''

# from netmiko import ConnectHandler
import paramiko
import os
import time

username = os.environ['USER']
password = os.environ['PWRD']


def connect_host(Host):
    host = Host
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh_client.connect(
        host,
        username=username,
        password=password
    )
    (
        ssh_stdin,
        ssh_stdout,
        ssh_stderr
    ) = ssh_client.exec_command(' ')
    ssh_stdin.channel.send("grep pattern 'failed to get group obj'  mp-log useridd.log")
    ssh_stdin.channel.shutdown_write()
    resp = ssh_stdout.read().decode('utf_8')
    ssh_client.close()
    return resp


def match_pattern(string1):
    if "failed to get group obj" in string1:
        return True
    else:
        return False


def send_email():
    pass
#plaeholder for email config


def main():
    out_string = connect_host("1.1.1.1")
    result1 = match_pattern(out_string)
    if result1 == True:
        print("error found")
        send_email()
    else:
        print("no error found")
        pass


if __name__ == '__main__':
    start_time = time.time()
    main()
    end_time = time.time()
    elapsed_time = end_time - start_time
    # print("Time taken:", elapsed_time, "seconds")
    print("Time taken: {:.2f} seconds".format(elapsed_time))
